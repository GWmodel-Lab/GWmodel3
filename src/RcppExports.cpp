// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

// #include <RcppArmadillo.h>
#include <Rcpp.h>
#include <armadillo>
#include <vector>
#include <string>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

inline arma::mat rtoa(const NumericMatrix& rmat)
{
    Rcout << "rmat(" << rmat.nrow() << "," << rmat.ncol() << ")\n";
    return arma::mat(rmat.begin(), rmat.nrow(), rmat.ncol());
}

inline arma::vec rtoa(const NumericVector& rvec)
{
    Rcout << "rvec(" << rvec.size() << ")\n";
    return arma::vec(rvec.begin(), rvec.size());
}

inline SEXP ator(const arma::mat& amat)
{
    RObject x = wrap(amat.begin(), amat.end());
    x.attr("dim") = Dimension(amat.n_rows, amat.n_cols);
    return x;
}

inline SEXP ator(const arma::vec& avec)
{
    RObject x = wrap(avec.begin(), avec.end());
    return x;
}

int gwm_gwr_basic(
    const arma::mat& x, const arma::vec& y, const arma::mat& coords,
    const std::vector<std::string>& indep_vars, const std::vector<std::string>& dep_var,
    double bw, bool adaptive, size_t kernel,
    bool longlat, double p, double theta,
    bool hatmatrix, size_t parallel_type, int parallel_arg);
RcppExport SEXP _GWmodel_gwr_basic(
    SEXP xSEXP, SEXP ySEXP, SEXP coordsSEXP,
    SEXP indep_varsSEXP, SEXP dep_varSEXP,
    SEXP bwSEXP, SEXP adaptiveSEXP, SEXP kernelSEXP,
    SEXP longlatSEXP, SEXP pSEXP, SEXP thetaSEXP,
    SEXP hatmatrixSEXP, SEXP parallel_typeSEXP, SEXP parallel_argSEXP)
{
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type coords(coordsSEXP);
    Rcpp::traits::input_parameter< const CharacterVector& >::type indep_vars(indep_varsSEXP);
    Rcpp::traits::input_parameter< const CharacterVector& >::type dep_var(dep_varSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    Rcpp::traits::input_parameter< bool >::type adaptive(adaptiveSEXP);
    Rcpp::traits::input_parameter< size_t >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< bool >::type longlat(longlatSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< bool >::type hatmatrix(hatmatrixSEXP);
    Rcpp::traits::input_parameter< size_t >::type parallel_type(parallel_typeSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type parallel_arg(parallel_argSEXP);

    // Convert data types
    arma::mat mx = rtoa(x);
    arma::vec my = rtoa(y);
    arma::mat mcoords = rtoa(coords);
    std::vector<std::string> vxfields = as< std::vector<std::string> >(Rcpp::CharacterVector(indep_vars));
    std::vector<std::string> vyfields = as< std::vector<std::string> >(Rcpp::CharacterVector(dep_var));
    std::vector<int> vpar_args = as< std::vector<int> >(Rcpp::IntegerVector(parallel_arg));

    int status = gwm_gwr_basic(mx, my, mcoords, vxfields, vyfields, bw, adaptive, kernel, longlat, p, theta, hatmatrix, parallel_type, vpar_args[0]);
    // Get Diagnostic
    // GwmRegressionDiagnostic diagnostic = algorithm.diagnostic();
    // List mdiagnostic = List::create(
    //     Named("RSS") = diagnostic.RSS,
    //     Named("AIC") = diagnostic.AIC,
    //     Named("AICc") = diagnostic.AICc,
    //     Named("ENP") = diagnostic.ENP,
    //     Named("EDF") = diagnostic.EDF,
    //     Named("RSquare") = diagnostic.RSquare,
    //     Named("RSquareAdjust") = diagnostic.RSquareAdjust
    // );

    // Return Results
    rcpp_result_gen = List::create(
        // Named("betas") = wrap(mbetas),
        // Named("diagnostic") = mdiagnostic,
        // Named("fitted") = ator(mfitted)
    );
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_GWmodel_gwr_basic", (DL_FUNC) &_GWmodel_gwr_basic, 14},
    {NULL, NULL, 0}
};

RcppExport void R_init_GWmodel(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
