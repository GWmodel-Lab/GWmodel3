
## With R 3.1.0 or later, you can uncomment the following line to tell R to
## enable compilation with C++11 (where available)
##
## Also, OpenMP support in Armadillo prefers C++11 support. However, for wider
## availability of the package we do not yet enforce this here.  It is however
## recommended for client packages to set it.
##
## And with R 3.4.0, and RcppArmadillo 0.7.960.*, we turn C++11 on as OpenMP
## support within Armadillo prefers / requires it
CXX_STD = CXX17

GSL_LIBS = @GSL_LIBS@
GSL_CFLAGS = @GSL_CFLAGS@

DEF_DOUBLE_EPS = 1e-8
DEF_M_PI = 3.14159265358979323846
DEF_M_PI_2 = 1.57079632679489661923

LIBGWMODEL_CXXFLAGS = \
	-I./libgwmodel/include \
	-I./libgwmodel/include/gwmodelpp \
	-DM_PI=$(DEF_M_PI) \
	-DM_PI_2=$(DEF_M_PI_2) \
	-DDOUBLE_EPS=$(DEF_DOUBLE_EPS) \
	-DDBL_MAX=__DBL_MAX__ \
	-DUSE_RCPPARMADILLO

OPENMP_CXXFLAGS = @OPENMP_CXXFLAGS@
ifneq ($(strip $(OPENMP_CXXFLAGS)),)
LIBGWMODEL_CXXFLAGS += -DENABLE_OPENMP
endif

OBJECTS_LIBGWMODEL = \
	libgwmodel/src/gwmodelpp/spatialweight/BandwidthWeight.o \
	libgwmodel/src/gwmodelpp/spatialweight/CRSDistance.o \
	libgwmodel/src/gwmodelpp/spatialweight/DMatDistance.o \
	libgwmodel/src/gwmodelpp/spatialweight/Distance.o \
	libgwmodel/src/gwmodelpp/spatialweight/MinkwoskiDistance.o \
	libgwmodel/src/gwmodelpp/spatialweight/OneDimDistance.o \
	libgwmodel/src/gwmodelpp/spatialweight/SpatialWeight.o \
	libgwmodel/src/gwmodelpp/spatialweight/Weight.o \
	libgwmodel/src/gwmodelpp/BandwidthSelector.o \
	libgwmodel/src/gwmodelpp/GWDR.o \
	libgwmodel/src/gwmodelpp/GWPCA.o \
	libgwmodel/src/gwmodelpp/GWRBase.o \
	libgwmodel/src/gwmodelpp/GWRBasic.o \
	libgwmodel/src/gwmodelpp/GWSS.o \
	libgwmodel/src/gwmodelpp/GWRMultiscale.o \
	libgwmodel/src/gwmodelpp/SpatialAlgorithm.o \
	libgwmodel/src/gwmodelpp/SpatialMonoscaleAlgorithm.o \
	libgwmodel/src/gwmodelpp/SpatialMultiscaleAlgorithm.o \
	libgwmodel/src/gwmodelpp/VariableForwardSelector.o

OBJECTS_TELEGRAM = \
	telegrams/RTelegram.o \
	telegrams/GWRBasicTelegram.o \
	telegrams/GWRMultiscaleTelegram.o \
	telegrams/GWDRTelegram.o

OBJECTS_GWMODEL = \
	utils.o \
	gwr_basic.o \
	gwr_multiscale.o \
	gwdr.o \
	RcppExports.o

OBJECTS_CXX = $(OBJECTS_LIBGWMODEL) $(OBJECTS_TELEGRAM) $(OBJECTS_GWMODEL)

PKG_CXXFLAGS = $(SHLIB_OPENMP_CXXFLAGS) $(LIBGWMODEL_CXXFLAGS) $(GSL_CFLAGS) -DRCPP_USE_GLOBAL_ROSTREAM
PKG_LIBS = $(SHLIB_OPENMP_CXXFLAGS) $(LAPACK_LIBS) $(BLAS_LIBS) $(FLIBS) $(GSL_LIBS)

### [Begin] Configure CUDA
ENABLE_CUDA = @ENABLE_CUDA@
ifeq ($(ENABLE_CUDA),1)
NVCC=@NVCC@
CUDA_DEFS = @CUDA_DEFS@
CUDA_LIBS = @CUDA_LIBS@
CUDA_INCL = @CUDA_INCL@
CU_ARGS = -std=c++14 -Xcompiler -fPIC -Xcudafe --diag_suppress=boolean_controlling_expr_is_constant -DNDEBUG
CU_INCL = ${R_INCL}
CU_ARCH = \
-gencode arch=compute_52,code=sm_52 \
-gencode arch=compute_60,code=sm_60 \
-gencode arch=compute_61,code=sm_61 \
-gencode arch=compute_70,code=sm_70 \
-gencode arch=compute_75,code=sm_75

LIBGWMODEL_CXXFLAGS += -I./libgwmodel/include/gwmodelpp/utils
PKG_CXXFLAGS += -I./libgwmodel/include/gwmodelpp/utils $(CUDA_DEFS) -I$(CUDA_INCL)
PKG_LIBS += $(CUDA_LIBS)
GWmodel_CUDA_LIB_PATH = @GWmodel_CUDA_LIB_PATH@
OBJECTS_CUDA_CU = \
	libgwmodel/src/gwmodelpp/spatialweight/cuda/BandwidthWeightKernel.o \
	libgwmodel/src/gwmodelpp/spatialweight/cuda/CRSDistanceKernel.o
OBJECTS_CUDA_CXX = \
	libgwmodel/src/gwmodelpp/utils/cumat.o \
	libgwmodel/src/gwmodelpp/utils/CudaUtils.o
else
OBJECTS_CUDA_CU = 
OBJECTS_CUDA_CXX = 
endif
### [End]

### [Begin] Configure MPI
ENABLE_MPI = @ENABLE_MPI@
ifeq ($(ENABLE_MPI),1)
MPI_CFLAGS = @MPI_CFLAGS@
MPI_LIBS = @MPI_LIBS@
PKG_CXXFLAGS += ${MPI_CFLAGS} -DENABLE_MPI
PKG_LIBS += ${MPI_LIBS}
OBJECTS_CXX += libgwmodel/src/gwmodelpp/utils/armampi.o
endif
### [End]

OBJECTS = ${OBJECTS_CUDA_CU} ${OBJECTS_CUDA_CXX} ${OBJECTS_CXX}

.PHONY: all clean

all : GWmodel3.so

GWmodel3.so : ${OBJECTS}

${OBJECTS_CXX}: %.o: %.cpp

ifeq ($(ENABLE_CUDA),1)
$(OBJECTS_CUDA_CU): %.o: %.cu
	$(NVCC) $(CU_ARCH) $(CU_ARGS) $(CU_INCL) $(LIBGWMODEL_CXXFLAGS) -I${CUDA_INCL} -c $< -o $@

$(OBJECTS_CUDA_CXX): %.o: %.cpp
endif

clean :
	rm -rf *.o Makevars
